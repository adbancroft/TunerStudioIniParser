// Lark grammar definition for TunerStudio INI files
//
// This parser is less tolerant than TunerStudio:
//   key-value pairs: the value must be comma delimited (TunerStudio tolerates spaces)
//   there must be a blank line at the end
//   Expression markers ("{", "}") and parentheses must be balanced
//   All identifiers must be cnames (no spaces, quotes etc.)

%import common (WS_INLINE, NEWLINE, LETTER, DIGIT, WS, ESCAPED_STRING, CNAME, FLOAT, INT)

%ignore WS_INLINE

// ============================ Overall File Structure ============================

start         : file_header sections transform_dict_from_tuples
file_header      : (kvp_line | _pp_line)*
sections   : _section+ transform_dict_from_types
_section         : context_help_section 
				| constants_section 
				| generic_section
				| tableeditor_section 
				| gaugeconfig_section 
				| pcvariables_section
				| curveeditor_section

// ============================ Sections  ============================

// The key-value pairs in this section need special handling.
// The values are just strings - but they can have embedded *unescaped* quotes
// There is no way to parse these as part of normal KVP processing
// Hence special handling
context_help_section : "[" context_help_section_name "]" _EOL context_help_section_body transform_dict_from_tuples transform_hoist_children
!context_help_section_name: ("SettingContextHelp" transform_tuple_only transform_is_key) -> section_name
context_help_section_body: ((_pp_line | help_line)* ) -> dict_data
help_line          : help_line_key help_line_value _EOL transform_hoist_children
help_line_key:     KEY transform_hoist_only_child
help_line_value   : STRING_VALUE transform_hoist_only_child
STRING_VALUE         : /\".*\"/

// Entries in the Constants section can be grouped into pages 
constants_section : "[" constants_section_name "]" _EOL header_lines pages transform_dict_from_tuples transform_hoist_children
!constants_section_name: ("Constants" transform_tuple_only transform_is_key) -> section_name
header_lines      : (kvp_line | _pp_line | message_format_line)*
pages           : (page+ transform_dict_from_types) -> dict_data
page              : _PAGE_TAG page_num _EOL page_lines transform_dict_from_tuples transform_hoist_children
_PAGE_TAG         : "page"i WS_INLINE? "=" 
page_lines     : (_page_line+ transform_dict_from_types)->dict_data
_page_line        : kvp_line | kvp_scalar_line | kvp_bits_line | kvp_array_line | kvp_string_line | _pp_line | text_line

// Entries in here can form a unique dictionary
pcvariables_section:  "[" pcvariables_section_name "]" _EOL variables
variables           : _section_line* transform_dict_from_types
!pcvariables_section_name: ("PcVariables" transform_tuple_only transform_is_key) -> section_name

// Entries in the TableEditor section can be grouped into tables
tableeditor_section : "[" tableeditor_section_name "]" _EOL tables
!tableeditor_section_name: ("TableEditor" transform_tuple_only transform_is_key) -> section_name
tables           : table+ transform_dict_from_types
table               : _TABLE_TAG _table_header _EOL _table_line+
_TABLE_TAG          : "table"i WS_INLINE? "=" 
	_table_header      : table_id "," map3d_id "," title "," page_num ("," unknown_values)?
		table_id          : _identifier transform_tuple_only transform_is_key
		map3d_id          : _identifier transform_tuple_only
		title             : _string_literal transform_tuple_only

	_table_line       : kvp_line | _pp_line | grid_height | grid_orient | zbins | xbins | ybins | help_topic | xy_labels | updown_labels
	grid_height       : "gridHeight"i "=" NUMBER _EOL
	grid_orient       : "gridOrient"i "=" NUMBER "," NUMBER "," NUMBER _EOL
	xy_labels         : "xyLabels" "=" _label_list _EOL
	updown_labels     : "upDownLabel" "=" _label_list _EOL
	zbins             : "zbins"i "=" axis_bin _EOL

// Entries in the GaugeConfigurations section can be grouped into gauge categories
gaugeconfig_section     : "[" gaugeconfig_section_name "]" _EOL _gaugeconfig_headerline* gauge_category*
!gaugeconfig_section_name : ("GaugeConfigurations" transform_tuple_only transform_is_key) -> section_name
gauge_category          : _GAUGE_CATEGORY_TAG ANY_VALUE _EOL _gauge_category_line+
	_GAUGE_CATEGORY_TAG     : "gaugeCategory"i WS_INLINE? "=" 
	_gauge_category_line    : kvp_line | _pp_line
	_gaugeconfig_headerline : kvp_line | _pp_line

// Curve section can be grouped into curves & their properties
curveeditor_section : "[" curveeditor_section_name "]" _EOL  curves
!curveeditor_section_name: ("CurveEditor" transform_tuple_only transform_is_key) -> section_name
curves: curve+ transform_dict_from_types
curve               : "curve"i "="  _curve_header _EOL _curve_line+
	_curve_header   : curve_id "," name ("," page_num)?
		curve_id        : _identifier transform_tuple_only transform_is_key
		name            : _string_literal transform_tuple_only

	_curve_line  : kvp_line | _pp_line | xbins | ybins | xaxis_limits | yaxis_limits | columnlabels | gauge | size | line_label
	xaxis_limits : "xaxis"i "=" axis_limits _EOL
	yaxis_limits : "yaxis"i "=" axis_limits _EOL
	columnlabels : "columnlabel"i "=" _label_list _EOL
	gauge        : GAUGE_TAG  _identifier ("," unknown_values)? _EOL
		GAUGE_TAG    : "gauge"i WS_INLINE? "="
	size         : "size"i "=" dim1 "," dim2 _EOL
		dim1         : NUMBER
		dim2         : NUMBER
	line_label   : "lineLabel"i "=" _string_literal _EOL

	axis_limits : min "," max "," step transform_dict_from_tuples
		min          : (number_field | inline_expression | variable_ref) transform_tuple_only
		max          : (number_field | inline_expression | variable_ref) transform_tuple_only
		step         : (number_field | inline_expression | variable_ref) transform_tuple_only
	_label_list  : (_label_list ",")? label
		label        : string_literal | inline_expression | variable_ref

// Any other section
generic_section: "[" section_name "]" _EOL  lines
lines:        _section_line*
_section_line  : help_topic | kvp_scalar_line | kvp_bits_line | kvp_array_line | kvp_string_line | kvp_line | defaultvalue_line | _pp_line | text_line | message_format_line | gauge | size
section_name   : SECTION_NAME transform_tuple_only transform_is_key
SECTION_NAME   : (LETTER | DIGIT) (LETTER | DIGIT | " ")* 

// ============================ Lines ============================

// Key/value pair line. I.e. " key = value "
// General format of key-value pairs:
// name = class,  type, offset, shape, units, scale, translate, lo, hi, digits
kvp_line        : kvp _field_list _EOL

kvp_scalar_line : kvp_scalar "," data_type ("," offset)? ("," _variable_parameters)? _EOL transform_dict_from_tuples
kvp_scalar : (KVP_SCALAR_TAG transform_tuple_only transform_is_key) -> name 
KVP_SCALAR_TAG  : KEY WS_INLINE? "scalar"i

kvp_bits_line : kvp_bits "," data_type ("," offset)? "," bit_size ("," unknown_values)? _EOL transform_dict_from_tuples
kvp_bits  : (KVP_BITS_TAG transform_tuple_only transform_is_key)-> name
KVP_BITS_TAG  : KEY WS_INLINE? "bits"i

kvp_array_line : kvp_array "," data_type ("," offset)? "," (dim1d|dim2d) ("," _variable_parameters)? _EOL transform_dict_from_tuples
kvp_array : (KVP_ARRAY_TAG transform_tuple_only transform_is_key) -> name
KVP_ARRAY_TAG  : KEY WS_INLINE? "array"i

kvp_string_line : kvp_string "," encoding ("," offset)? "," length _EOL transform_dict_from_tuples
kvp_string : (KVP_STRING_TAG transform_tuple_only transform_is_key) -> name
KVP_STRING_TAG  : KEY WS_INLINE? "string"i

	_variable_parameters: units
				| units "," (scale | non_numeric_field_list)
				| units "," scale "," (translate | non_numeric_field_list)
				| units "," scale "," translate "," (low | non_numeric_field_list)
				| units "," scale "," translate "," low "," (high | non_numeric_field_list)
				| units "," scale "," translate "," low "," high "," digits ("," unknown_values)?
	units            : (inline_expression | variable_ref | string_literal) transform_tuple_only
	scale: (number_field | inline_expression | variable_ref) transform_tuple_only
	translate : (number_field | inline_expression | variable_ref) transform_tuple_only
	low : (number_field | inline_expression | variable_ref) transform_tuple_only
	high : (number_field | inline_expression | variable_ref) transform_tuple_only
	digits: (number_field | inline_expression | variable_ref) transform_tuple_only

	unknown_values : _field_list
	non_numeric_field_list: _non_numeric_field_list -> unknown_values
	_non_numeric_field_list: string_literal ("," _field)*

	offset           : INT transform_tuple_only
	kvp         : KEY transform_tuple_only transform_is_key
	encoding         : _identifier
	length           : INT

	dim1d   : "[" INT "]" transform_tuple_only
	dim2d   : "[" INT "x" INT "]" -> dim2d
	bit_size : "[" INT ":" INT "]"
	data_type  : DATA_TYPE transform_tuple_only
	DATA_TYPE.2     : ("S" | "U" | "F") INT


// Lines beginning with #. Typiclly preprocessor directives
_pp_line       : hashdef | error
hashdef        :_HASHDEF_TAG symbol "=" defined_value _EOL transform_dict_from_tuples
symbol:         _identifier transform_tuple_only transform_is_key
_HASHDEF_TAG   : "#" WS_INLINE? "define"i 
defined_value  : ANY_VALUE
error          : _HAS_ERROR_TAG ANY_VALUE  _EOL
_HAS_ERROR_TAG : "#" WS_INLINE? "error"i 

// defaultValue
defaultvalue_line:  "defaultValue"i "=" identifier "," default_value _EOL
default_value    : ANY_VALUE

// text = 
text_line      : _TEXTLINE_TAG STRING_VALUE _EOL
_TEXTLINE_TAG  : "text"i WS_INLINE? "="

// messageEnvelopeFormat
message_format_line: "messageEnvelopeFormat" "=" ANY_VALUE _EOL

// Shared 

xbins       : "xBins"i "=" axis_bin _EOL
ybins       : "yBins"i "=" axis_bin _EOL
axis_bin    : constant_ref ("," outputchannel ("," unknown)?)?  transform_dict_from_tuples
	constant_ref : _identifier
	outputchannel: _identifier
	unknown: _identifier
help_topic  : "topicHelp"i "=" (string_literal | identifier) _EOL


// ============================ Comma Delimited Field List  ============================

_field_list : (_field_list ",")? _field?
_field      :  inline_expression 
             | variable_ref 
             | type_other 
             | code_override
             | type_kvp
             | filter_field
			 | string_literal
variable_ref  : "$" CNAME transform_tuple_only
inline_expression  : "{" INLINE_EXPRESSION? "}" transform_tuple_only
INLINE_EXPRESSION  : /[^}\n]+/
code_override: "%code_override"i "=" (name_override | variable_ref) transform_tuple_only
name_override   : _NAME_TAG NAME_OVERRIDE transform_tuple_only
NAME_OVERRIDE    :  /[^,\n]+/
_NAME_TAG        : "name"i WS_INLINE? "="
type_kvp        : TYPE_KVP transform_tuple_only
TYPE_KVP    : (INT | CNAME) WS_INLINE? "=" WS_INLINE? (ESCAPED_STRING | NUMBER)
filter_field       :_FILTER transform_tuple_only
_FILTER           : /\s*&|=|<|>\s*(?=,)/
type_other        : ANY_FIELD_VALUE transform_tuple_only
ANY_FIELD_VALUE.-1: /[^,\n]+/
number_field : NUMBER transform_tuple_only
NUMBER               : ["+"|"-"]? (FLOAT | INT)

// ============================ General  ============================

ANY_VALUE      : /[^\n]+/
KEY.-1         : (CNAME | ESCAPED_STRING) WS_INLINE? "="
_EOL           : NEWLINE
identifier     : _identifier
_identifier    : CNAME
page_num  : INT transform_tuple_only transform_is_key
string_literal  : _string_literal transform_tuple_only
_string_literal : ESCAPED_STRING

// ============================ General  ============================

transform_hoist_children:
transform_tuple_only:
transform_hoist_only_child:
transform_dict_from_tuples:
transform_dict_from_types:
transform_is_key: