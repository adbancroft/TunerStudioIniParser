// Lark grammar definition for TunerStudio INI files
//
// This parser is less tolerant than TunerStudio:
//   key-value pairs: the value must be comma delimited (TunerStudio tolerates spaces)
//   there must be a blank line at the end
//   Expression markers ("{", "}") and parentheses must be balanced
//   All identifiers must be cnames (no spaces, quotes etc.)

%import common (WS_INLINE, NEWLINE, LETTER, DIGIT, WS, ESCAPED_STRING, CNAME, FLOAT, INT)

%ignore WS_INLINE

// ============================ Overall File Structure ============================

start       : file_header sections
file_header : (kvp_line | _pp_line)*
sections    : _section+
_section    : context_help_section 
				| constants_section 
				| generic_section
				| tableeditor_section 
				| pcvariables_section
				| curveeditor_section

// ============================ Sections  ============================

// The key-value pairs in this section need special handling.
// The values are just strings - but they can have embedded *unescaped* quotes
// There is no way to parse these as part of normal KVP processing
// Hence special handling
context_help_section      : "[" context_help_section_name "]" _EOL context_help_section_body
	!context_help_section_name: "SettingContextHelp" -> name
	context_help_section_body : ((_pp_line | help_line)* ) -> dict_data
		help_line                 : KEY STRING_VALUE _EOL
		STRING_VALUE              : /\".*\"/

// Entries in the Constants section can be grouped into pages 
constants_section : "[" constants_section_name "]" _EOL header_lines pages
	!constants_section_name: "Constants" -> name
	header_lines           : (kvp_line | _pp_line | message_format_line)*
	pages                  : page+
		page       : _PAGE_TAG page_num _EOL page_lines
		_PAGE_TAG  : "page"i WS_INLINE? "=" 
		page_lines : _page_line+
		_page_line : kvp_line | kvp_scalar_line | kvp_bits_line | kvp_array_line | kvp_string_line | _pp_line | text_line

// Entries in here can form a unique dictionary
pcvariables_section:  "[" pcvariables_section_name "]" _EOL variables
	variables                : _section_line*
	!pcvariables_section_name: "PcVariables" -> name

// Entries in the TableEditor section can be grouped into tables
tableeditor_section : "[" tableeditor_section_name "]" _EOL tables
	!tableeditor_section_name: "TableEditor" -> name
	tables                   : table+ 
		table : _TABLE_TAG _table_header _EOL _table_line+
			_TABLE_TAG          : "table"i WS_INLINE? "=" 
			_table_header      : table_id "," map3d_id "," title "," page_num ("," unknown_values)?
				table_id          : _identifier 
				map3d_id          : _identifier 
				title             : _string_literal 

			_table_line       : kvp_line | _pp_line | grid_height | grid_orient | zbins | xbins | ybins | help_topic | xy_labels | updown_labels
			grid_height       : "gridHeight"i "=" NUMBER _EOL 
			grid_orient       : "gridOrient"i "=" NUMBER "," NUMBER "," NUMBER _EOL
			xy_labels         : "xyLabels" "=" _label_list _EOL
			updown_labels     : "upDownLabel" "=" _label_list _EOL
			zbins             : "zbins"i "=" axis_bin _EOL 

// Curve section can be grouped into curves & their properties
curveeditor_section : "[" curveeditor_section_name "]" _EOL  curves
!curveeditor_section_name: "CurveEditor" -> name
curves: curve+
curve               : "curve"i "="  _curve_header _EOL _curve_line+
	_curve_header   : curve_id "," curve_name ("," page_num)?
		curve_id        : _identifier 
		curve_name      : _string_literal -> name
	_curve_line  : kvp_line | _pp_line | xbins | ybins | xaxis_limits | yaxis_limits | column_labels | curve_gauge | curve_dimensions | line_label
		xaxis_limits  : "xaxis"i "=" axis_limits _EOL 
		yaxis_limits  : "yaxis"i "=" axis_limits _EOL 
		column_labels : "columnlabel"i "=" _label_list _EOL
		curve_gauge   : _GAUGE_TAG _identifier _EOL
		curve_dimensions : "size"i "=" xsize "," ysize _EOL
		line_label    : "lineLabel"i "=" _string_literal _EOL 
		axis_limits   : min "," max "," step
			min          : (number_field | inline_expression | variable_ref) 
			max          : (number_field | inline_expression | variable_ref) 
			step         : (number_field | inline_expression | variable_ref) 

// Any other section
generic_section: "[" section_name "]" _EOL  lines
lines:        _section_line*
_section_line  : help_topic | kvp_scalar_line | kvp_bits_line | kvp_array_line | kvp_string_line | kvp_line | defaultvalue_line | _pp_line | text_line | message_format_line | generic_gauge_line
section_name   : SECTION_NAME -> name
SECTION_NAME   : (LETTER | DIGIT) (LETTER | DIGIT | " ")* 

// ============================ Lines ============================

// Key/value pair line. I.e. " key = value "
// General format of key-value pairs:
// name = class,  type, offset, shape, units, scale, translate, lo, hi, digits
kvp_line        : key_generic values _EOL
	values      : _field_list
	key_generic : KEY -> key_name 

kvp_scalar_line : kvp_scalar "," type_name ("," offset)? ("," _variable_parameters)? _EOL
kvp_scalar      : KVP_SCALAR_TAG -> name 
KVP_SCALAR_TAG  : KEY WS_INLINE? "scalar"i

kvp_bits_line : kvp_bits "," type_name ("," offset)? "," bit_size ("," unknown_values)? _EOL
kvp_bits      : KVP_BITS_TAG -> name
KVP_BITS_TAG  : KEY WS_INLINE? "bits"i

kvp_array_line : kvp_array "," type_name ("," offset)? "," (dim1d|dim2d) ("," _variable_parameters)? _EOL
kvp_array      : KVP_ARRAY_TAG -> name
KVP_ARRAY_TAG  : KEY WS_INLINE? "array"i

kvp_string_line : kvp_string "," encoding ("," offset)? "," length _EOL
kvp_string      : KVP_STRING_TAG -> name
KVP_STRING_TAG  : KEY WS_INLINE? "string"i

	_variable_parameters: units
				| units "," (scale | non_numeric_field_list)
				| units "," scale "," (translate | non_numeric_field_list)
				| units "," scale "," translate "," (low | non_numeric_field_list)
				| units "," scale "," translate "," low "," (high | non_numeric_field_list)
				| units "," scale "," translate "," low "," high "," digits ("," unknown_values)?
	units     : (inline_expression | variable_ref | string_literal) 
	scale     : (number_field | inline_expression | variable_ref) 
	translate : (number_field | inline_expression | variable_ref) 
	low       : (number_field | inline_expression | variable_ref) 
	high      : (number_field | inline_expression | variable_ref) 
	digits    : (number_field | inline_expression | variable_ref) 

	unknown_values         : _field_list
	non_numeric_field_list : _non_numeric_field_list -> unknown_values
	_non_numeric_field_list: string_literal ("," _field)*

	offset     : INT 
	encoding   : _identifier
	length     : INT

	dim1d       : "[" INT "]" 
	dim2d       : "[" xsize "x" ysize "]"
	xsize       : INT
	ysize       : INT
	bit_size    : "[" start_bit ":" bit_length "]"
	start_bit   : INT
	bit_length  : INT
	type_name   : DATA_TYPE 
	DATA_TYPE.2 : ("S" | "U" | "F") INT


// Lines beginning with #. Typiclly preprocessor directives
_pp_line       : hashdef | error
hashdef        :_HASHDEF_TAG symbol "=" (_hashdef_variable | (_field_list _EOL))
	symbol         : _identifier 
	_HASHDEF_TAG   : "#" WS_INLINE? "define"i 
	_hashdef_variable : kvp_scalar_line | kvp_bits_line | kvp_array_line | kvp_string_line | kvp_line
error          : _HAS_ERROR_TAG ANY_VALUE  _EOL
_HAS_ERROR_TAG : "#" WS_INLINE? "error"i 

// defaultValue
defaultvalue_line:  "defaultValue"i "=" identifier "," default_value _EOL
default_value    : ANY_VALUE

// text = 
text_line      : _TEXTLINE_TAG STRING_VALUE _EOL
_TEXTLINE_TAG  : "text"i WS_INLINE? "="

// messageEnvelopeFormat
message_format_line: "messageEnvelopeFormat" "=" ANY_VALUE _EOL

generic_gauge_line: _GAUGE_TAG _identifier ("," unknown_values)? _EOL
	_GAUGE_TAG: "gauge"i WS_INLINE? "="

xbins       : "xBins"i "=" axis_bin _EOL 
ybins       : "yBins"i "=" axis_bin _EOL 
help_topic  : "topicHelp"i "=" (string_literal | identifier) _EOL 

// ============================ Line Components  ============================

axis_bin    : constant_ref ("," outputchannel ("," unknown)?)? 
	constant_ref : _identifier 
	outputchannel: _identifier 
	unknown: _identifier 
	
_field_list : (_field_list ",")? _field?
_field      :  inline_expression 
             | variable_ref 
             | type_other 
             | code_override
             | type_kvp
             | filter_field
			 | string_literal

_label_list   : (_label_list ",")? string_literal

variable_ref      : "$" CNAME
inline_expression : "{" INLINE_EXPRESSION? "}" 
	INLINE_EXPRESSION : /[^}\n]+/
code_override     : "%code_override"i "=" (name_override | variable_ref) 
	name_override     : _NAME_TAG NAME_OVERRIDE 
	NAME_OVERRIDE     :  /[^,\n]+/
	_NAME_TAG         : "name"i WS_INLINE? "="
type_kvp          : TYPE_KVP 
	TYPE_KVP          : (INT | CNAME) WS_INLINE? "=" WS_INLINE? (ESCAPED_STRING | NUMBER)
filter_field      :_FILTER 
	_FILTER           : /\s*&|=|<|>\s*(?=,)/
type_other        : ANY_FIELD_VALUE 
ANY_FIELD_VALUE.-1: /[^,\n]+/
number_field      : NUMBER 
NUMBER            : ["+"|"-"]? (FLOAT | INT)

ANY_VALUE       : /[^\n]+/
KEY.-1          : (CNAME | ESCAPED_STRING) WS_INLINE? "="
_EOL            : NEWLINE
identifier      : _identifier
_identifier     : CNAME
page_num        : INT 
string_literal  : _string_literal 
_string_literal : ESCAPED_STRING